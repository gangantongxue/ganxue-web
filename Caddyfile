ganxue.top {
    root * /home/ganxue-web

    # 禁止访问隐藏文件
    @hidden {
        file is_hidden
    }
    handle @hidden {
        respond "Forbidden" 403
    }

    # 处理 /api/open 请求
    handle /api/open/* {
        # 精确路径重写：去除 /api/open 前缀
        #rewrite * /open/{path}

        # CORS 配置
        @options method OPTIONS
        handle @options {
            respond 204
        }
        header {
            Access-Control-Allow-Origin "{http.request.origin}"
            Access-Control-Allow-Methods "GET, POST, OPTIONS"
            Access-Control-Allow-Headers "DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
            Access-Control-Allow-Credentials "true"
        }

        reverse_proxy http://127.0.0.1:8080 {
            header_up Host {host}
            header_up X-Real-IP {http.request.remote}
            header_up X-Forwarded-For {http.request.remote}
        }
    }

    # 处理 /api/auth 请求
    handle /api/auth/* {
        # 精确路径重写：去除 /api/auth 前缀
        #rewrite * /auth/{path}

        # CORS 配置
        @options method OPTIONS
        handle @options {
            respond 204
        }
        header {
            Access-Control-Allow-Origin "{http.request.origin}"
            Access-Control-Allow-Methods "GET, POST, OPTIONS"
            Access-Control-Allow-Headers "DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
            Access-Control-Allow-Credentials "true"
        }

        reverse_proxy http://127.0.0.1:8080 {
            header_up Host {host}
            header_up X-Real-IP {http.request.remote}
            header_up X-Forwarded-For {http.request.remote}
        }
    }

    # 处理前端路由和静态文件
    handle {
        try_files {path} {path}/ /index.html
        file_server
        header Cache-Control "no-cache"
    }
}